const Groq = require("groq-sdk");

// ‚úÖ Safe initialization
let groqClient = null;

try {
    const apiKey = process.env.GROQ_API_KEY;

    if (!apiKey) {
        console.warn(
            "‚ö†Ô∏è GROQ_API_KEY is missing! Groq AI features will be disabled."
        );
    } else {
        groqClient = new Groq({ apiKey });
        console.log("‚úÖ Groq client initialized successfully.");
    }
} catch (err) {
    console.error("‚ùå Failed to initialize Groq client:", err.message);
}

// ‚úÖ Model selection (use stable and supported one)
const MODEL = "openai/gpt-oss-120b";

/**
 * Safely handles AI chat response.
 * @param {Array<Object>} messages - Chat messages array.
 * @returns {Promise<string>} - AI-generated message or fallback.
 */
async function getAIChatResponse(messages) {
    try {
        // 1Ô∏è‚É£ Basic validation
        if (
            !messages ||
            !Array.isArray(messages) ||
            messages.length === 0 ||
            !messages.some((m) => m.role === "user")
        ) {
            return "‚ö†Ô∏è Invalid input: No user message provided.";
        }

        // 2Ô∏è‚É£ Ensure Groq client is ready
        if (!groqClient) {
            console.error("üö´ Groq client not initialized (missing API key).");
            return "‚ö†Ô∏è AI service unavailable. Please contact the administrator.";
        }

        // 3Ô∏è‚É£ Call Groq API
        const chatCompletion = await groqClient.chat.completions.create({
            model: MODEL,
            messages,
            temperature: 0.5,
        });

        // 4Ô∏è‚É£ Extract response
        return (
            chatCompletion?.choices?.[0]?.message?.content ||
            "ü§ñ Sorry, I couldn't generate a response."
        );
    } catch (error) {
        console.error("‚ùå Groq AI Service Error:", error.message);
        return "‚ö†Ô∏è An internal error occurred while processing your request.";
    }
}

module.exports = { getAIChatResponse };
